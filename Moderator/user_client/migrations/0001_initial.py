# Generated by Django 3.2.11 on 2022-06-04 12:00

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='DateTime of when the object was created')),
                ('updated_on', models.DateTimeField(auto_now=True, db_column='updated_on', help_text='DateTime of when the object was last updated')),
                ('deleted_on', models.DateTimeField(default=None, help_text='DateTime of when the object was deletedNone if object is not deleted yet', null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Approved'), (2, 'Rejected'), (3, 'Under review'), (4, 'Marked Spam')], default=3, help_text='Status of any object in the database in the context of moderation')),
                ('user', models.BigIntegerField(default=1, help_text='Foreign Key to the `YearbookGamingUser` (of SocialService) who created the content')),
                ('content_type', models.IntegerField(choices=[(1, 'Chat'), (2, 'Chat History'), (3, 'Feed Post'), (4, 'Comment')], default=3, help_text='Integer denoting the `content_type` of the objectAvailable choices are `ContentTypeChoices.choices`')),
                ('text', models.TextField(blank=True, help_text='All the textual data of the post. May contain links as well')),
                ('parent', models.ForeignKey(help_text='ForeignKey relationship to an object of the same classUsed to implement parent-child relationsips. Eg- Post and its comments', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='user_client.content')),
            ],
            options={
                'ordering': ('-updated_on', '-created_on'),
                'get_latest_by': 'updated_on',
            },
        ),
        migrations.CreateModel(
            name='UploadObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='DateTime of when the object was created')),
                ('updated_on', models.DateTimeField(auto_now=True, db_column='updated_on', help_text='DateTime of when the object was last updated')),
                ('deleted_on', models.DateTimeField(default=None, help_text='DateTime of when the object was deletedNone if object is not deleted yet', null=True)),
                ('s3_object_key', models.CharField(help_text='The unique key that identifies the media on S3', max_length=500, unique=True)),
                ('extension', models.CharField(default='jpeg', help_text='Extension of the file to be uploaded', max_length=8)),
                ('meta', models.JSONField(default=dict, help_text='JSON Object containing meta-data of the fileUsed only for reading, not for querying')),
                ('upload_complete', models.BooleanField(default=False, help_text='Boolean denoting if the file has been successfully uploaded')),
                ('content', models.ForeignKey(help_text='ForeignKey Relationship field with `user_client.Content`Denotes the `content` object associated with the instance', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medias', to='user_client.content')),
            ],
            options={
                'ordering': ('-updated_on', '-created_on'),
                'get_latest_by': 'updated_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ModerationTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='DateTime of when the object was created')),
                ('updated_on', models.DateTimeField(auto_now=True, db_column='updated_on', help_text='DateTime of when the object was last updated')),
                ('deleted_on', models.DateTimeField(default=None, help_text='DateTime of when the object was deletedNone if object is not deleted yet', null=True)),
                ('pulled_on', models.DateTimeField(null=True)),
                ('completed_on', models.DateTimeField(null=True)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='user_client.content')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-updated_on', '-created_on'),
                'get_latest_by': 'updated_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='YearbookGamingModerator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='DateTime of when the object was created')),
                ('updated_on', models.DateTimeField(auto_now=True, db_column='updated_on', help_text='DateTime of when the object was last updated')),
                ('deleted_on', models.DateTimeField(default=None, help_text='DateTime of when the object was deletedNone if object is not deleted yet', null=True)),
                ('is_mod_available', models.BooleanField(default=False, help_text='Designates whether this user is currently available. ', verbose_name='logged_in')),
                ('last_logout', models.DateTimeField(default=datetime.datetime(2022, 6, 4, 12, 0, 22, 569937, tzinfo=utc), help_text='Last logout date-time of the moderator')),
                ('average_response_time', models.BigIntegerField(default=10, help_text='Average response time of the moderator. Defaults to 10')),
                ('times_abandoned', models.IntegerField(default=0, help_text='Number of times this moderator has abandoned the systemAbandoned by sitting idle and not log-outing')),
                ('posts_abandoned', models.IntegerField(default=0, help_text='Number of posts that had to be re-queued because this moderator abandoned')),
                ('user_rating', models.DecimalField(decimal_places=2, default=0, help_text='User Rating out of 10. Its stored in the format AB.XYZ', max_digits=5)),
                ('total_logged_in_time', models.IntegerField(default=0, help_text='Total time in minutes for which the moderator was logged in the system')),
                ('user', models.OneToOneField(help_text='Foreign key to `YearbookGamingUser` used to authenticate this moderator', on_delete=django.db.models.deletion.CASCADE, related_name='moderator', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-updated_on', '-created_on'),
                'get_latest_by': 'updated_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FeedbackTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('contents', models.ManyToManyField(related_name='feedbacks', to='user_client.Content')),
            ],
        ),
    ]
