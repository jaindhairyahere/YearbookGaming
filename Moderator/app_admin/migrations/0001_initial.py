# Generated by Django 3.2.11 on 2022-06-04 12:00

import app_admin.models
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.permission',),
            managers=[
                ('objects', django.contrib.auth.models.PermissionManager()),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='DateTime of when the object was created')),
                ('updated_on', models.DateTimeField(auto_now=True, db_column='updated_on', help_text='DateTime of when the object was last updated')),
                ('deleted_on', models.DateTimeField(default=None, help_text='DateTime of when the object was deletedNone if object is not deleted yet', null=True)),
                ('role_id', models.PositiveSmallIntegerField(default=0, help_text='ID of the `Role` that is stored in the Auth Service Database')),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='app_admin.group')),
            ],
            options={
                'ordering': ('-updated_on', '-created_on'),
                'get_latest_by': 'updated_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='YearbookGamingUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='DateTime of when the object was created')),
                ('updated_on', models.DateTimeField(auto_now=True, db_column='updated_on', help_text='DateTime of when the object was last updated')),
                ('deleted_on', models.DateTimeField(default=None, help_text='DateTime of when the object was deletedNone if object is not deleted yet', null=True)),
                ('YearbookGaming_id', models.PositiveIntegerField(default=1, help_text="Designated the user's YearbookGaming_id. This is supplied by the Auth-Service", unique=True)),
                ('username', models.CharField(help_text="Designated the user's username. This is supplied by the Auth-Service", max_length=100, unique=True)),
                ('email', models.EmailField(default='default@YearbookGamingtoys.com', help_text="Designated the user's email. This is supplied by the Auth-Service", max_length=254)),
                ('is_staff', models.BooleanField(default=True, help_text='Designates whether this user should be treated as staff. Only staff can access the admin portal.', verbose_name='staff')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('role', models.ForeignKey(help_text='Designates the Role this user has using a foreign key to the Role tableThis is usually supplied by the Auth-Service', on_delete=django.db.models.deletion.CASCADE, related_name='YearbookGaming_users', to='app_admin.role')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('-updated_on', '-created_on'),
                'get_latest_by': 'updated_on',
                'abstract': False,
            },
            managers=[
                ('objects', app_admin.models.YearbookGamingUserManager()),
            ],
        ),
    ]
