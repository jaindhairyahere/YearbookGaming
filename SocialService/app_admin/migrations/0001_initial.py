# Generated by Django 3.2.11 on 2022-06-07 02:16

import app_admin.models
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='YearbookUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_column='updated_on')),
                ('deleted_on', models.DateTimeField(db_column='deleted_on', default=None, null=True)),
                ('Yearbook_id', models.PositiveIntegerField(default=1, help_text="Designated the user's Yearbook_id. This is supplied by the Auth-Service", unique=True)),
                ('username', models.CharField(help_text="Designated the user's username. This is supplied by the Auth-Service", max_length=100, unique=True)),
                ('email', models.EmailField(default='default@Yearbooktoys.com', help_text="Designated the user's email. This is supplied by the Auth-Service", max_length=254)),
                ('is_staff', models.BooleanField(default=True, help_text='Designates whether this user should be treated as staff. Only staff can access the admin portal.', verbose_name='staff')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'ordering': ('-updated_on', '-created_on'),
                'get_latest_by': 'updated_on',
                'abstract': False,
            },
            managers=[
                ('objects', app_admin.models.YearbookUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
            ],
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_column='updated_on')),
                ('deleted_on', models.DateTimeField(db_column='deleted_on', default=None, null=True)),
                ('chat_policy', models.IntegerField(choices=[(0, 'No one can send messages'), (1, 'Friends can send messages'), (2, 'Anyone can send messages')], default=1)),
                ('friend_policy', models.IntegerField(choices=[(1, 'Other players can send friend requests'), (-1, 'Other players can send friend requests')], default=1)),
            ],
            options={
                'ordering': ('-updated_on', '-created_on'),
                'get_latest_by': 'updated_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.permission',),
            managers=[
                ('objects', django.contrib.auth.models.PermissionManager()),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_column='updated_on')),
                ('deleted_on', models.DateTimeField(db_column='deleted_on', default=None, null=True)),
                ('role_id', models.PositiveSmallIntegerField(default=0)),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='app_admin.group')),
            ],
            options={
                'ordering': ('-updated_on', '-created_on'),
                'get_latest_by': 'updated_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='YearbookPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on')),
                ('updated_on', models.DateTimeField(auto_now=True, db_column='updated_on')),
                ('deleted_on', models.DateTimeField(db_column='deleted_on', default=None, null=True)),
                ('blocked_users', models.ManyToManyField(related_name='_app_admin_Yearbookplayer_blocked_users_+', to='app_admin.YearbookPlayer')),
                ('friends', models.ManyToManyField(related_name='_app_admin_Yearbookplayer_friends_+', to='app_admin.YearbookPlayer')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_admin.policy')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='player', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-updated_on', '-created_on'),
                'get_latest_by': 'updated_on',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='Yearbookuser',
            name='role',
            field=models.ForeignKey(help_text='Designates the Role this user has using a foreign key to the Role tableThis is usually supplied by the Auth-Service', on_delete=django.db.models.deletion.CASCADE, related_name='Yearbook_users', to='app_admin.role'),
        ),
        migrations.AddField(
            model_name='Yearbookuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
